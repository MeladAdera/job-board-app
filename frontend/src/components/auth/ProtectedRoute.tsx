import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../../contexts/authContext';    // โฌ๏ธ ุชุบููุฑ ูู ../ ุฅูู ../../
import { UserRole } from '../../types';                  // โฌ๏ธ ููุณ ุงูุชุบููุฑ

interface ProtectedRouteProps {
  children: React.ReactNode;
  requiredRole?: UserRole;
}

/**
 * ๐ก๏ธ ูููู ูุญูุงูุฉ ุงููุณุงุฑุงุช
 * - ูุชุญูู ูู ุชุณุฌูู ุงูุฏุฎูู
 * - ูุชุญูู ูู ุงูุตูุงุญูุงุช ุฅุฐุง ุทููุจ
 * - ููุฌู ูุตูุญุฉ Login ุฅุฐุง ูุฒู
 */
const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ 
  children, 
  requiredRole 
}) => {
  const { isAuthenticated, user, isLoading } = useAuth();
  const location = useLocation();

  // ๐ฏ ุงููุนูุงุฑ 1: ุงูุชุนุงูู ูุน ุญุงูุฉ ุงูุชุญููู
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-lg">ุฌุงุฑู ุงูุชุญูู...</div>
      </div>
    );
  }

  // ๐ฏ ุงููุนูุงุฑ 2: ุงูุชุญูู ูู ุงููุตุงุฏูุฉ
  if (!isAuthenticated) {
    // ุญูุธ ุงููุณุงุฑ ุงูุญุงูู ูุฅุนุงุฏุชู ุจุนุฏ Login
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // ๐ฏ ุงููุนูุงุฑ 3: ุงูุชุญูู ูู ุงูุตูุงุญูุงุช (ุฅุฐุง ุทููุจ)
  if (requiredRole && user?.role !== requiredRole) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-lg text-red-600">ููุณ ูุฏูู ุตูุงุญูุฉ ูููุตูู ุฅูู ูุฐู ุงูุตูุญุฉ</div>
      </div>
    );
  }

  // ๐ฏ ุงููุนูุงุฑ 4: ูู ุดูุก ุตุญูุญ - ุนุฑุถ ุงููุญุชูู
  return <>{children}</>;
};

export default ProtectedRoute;